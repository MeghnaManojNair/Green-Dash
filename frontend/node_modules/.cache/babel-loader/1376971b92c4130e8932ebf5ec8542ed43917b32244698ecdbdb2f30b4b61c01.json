{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meghna\\\\Desktop\\\\Meghna Manoj Nair\\\\New York University\\\\Job Hunt\\\\Internships\\\\Vera 4\\\\frontend\\\\src\\\\components\\\\Chart.js\";\n/*import React from 'react';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\n\r\nconst Chart = ({ data, metric }) => {\r\n  // Check if data is undefined or null\r\n  if (!data || data.length === 0) {\r\n    return null; // Return null if data is not available\r\n  }\r\n\r\n  // Extract months from the first row of data\r\n  const months = data[0].slice(1);\r\n\r\n  // Print data and months to the console\r\n  console.log('Data:', data);\r\n  console.log('Months:', months);\r\n\r\n  // Remove the first row (months) from data\r\n  const metricsData = data.slice(1);\r\n\r\n  // Find the index of the selected metric\r\n  const metricIndex = metricsData.findIndex(row => row[0] === metric);\r\n\r\n  // Check if metric index is valid\r\n  if (metricIndex === -1) {\r\n    return null; // Return null if metric is not found in data\r\n  }\r\n\r\n  // Extract values for the selected metric\r\n  const metricValues = metricsData[metricIndex].slice(1);\r\n\r\n  // Combine months with corresponding metric values\r\n  const chartData = months.map((month, index) => ({\r\n    month,\r\n    [metric]: metricValues[index]\r\n  }));\r\n\r\n  return (\r\n    <LineChart width={800} height={400} data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"month\" />\r\n      <YAxis />\r\n      <Tooltip />\r\n      <Legend />\r\n      <Line type=\"monotone\" dataKey={metric} stroke=\"#8884d8\" />\r\n    </LineChart>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n\r\n*/\nimport React from 'react';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomTooltip = ({\n  active,\n  payload,\n  label\n}) => {\n  if (active && payload && payload.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-tooltip\",\n      style: {\n        backgroundColor: '#f5f5f5',\n        padding: '10px',\n        border: '1px solid #ccc'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"label\",\n        style: {\n          color: 'green'\n        },\n        children: `${label} : ${payload[0].value}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  }\n  return null;\n};\n_c = CustomTooltip;\nconst Chart = ({\n  data,\n  metric\n}) => {\n  if (!data || data.length === 0) {\n    return null; // Return null if data is not available\n  }\n  const months = ['Jan', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const metricsData = data.slice(1);\n  const metricIndex = metricsData.findIndex(row => row[0] === metric);\n  if (metricIndex === -1) {\n    return null; // Return null if metric is not found in data\n  }\n  const metricValues = metricsData[metricIndex].slice(1);\n  const chartData = months.map((month, index) => ({\n    month,\n    value: metricValues[index]\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      width: 1100,\n      height: 400,\n      data: chartData,\n      margin: {\n        top: 20,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"month\",\n        stroke: \"#000\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        label: {\n          value: metric,\n          angle: -90,\n          position: 'insideLeft',\n          style: {\n            fill: '#000'\n          }\n        },\n        stroke: \"#000\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"value\",\n        stroke: \"#8884d8\",\n        activeDot: {\n          r: 8\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Chart;\nexport default Chart;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomTooltip\");\n$RefreshReg$(_c2, \"Chart\");","map":{"version":3,"names":["React","LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","Legend","jsxDEV","_jsxDEV","CustomTooltip","active","payload","label","length","className","style","backgroundColor","padding","border","children","color","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","Chart","data","metric","months","metricsData","slice","metricIndex","findIndex","row","metricValues","chartData","map","month","index","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","stroke","angle","position","fill","content","type","activeDot","r","_c2","$RefreshReg$"],"sources":["C:/Users/Meghna/Desktop/Meghna Manoj Nair/New York University/Job Hunt/Internships/Vera 4/frontend/src/components/Chart.js"],"sourcesContent":["/*import React from 'react';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\n\r\nconst Chart = ({ data, metric }) => {\r\n  // Check if data is undefined or null\r\n  if (!data || data.length === 0) {\r\n    return null; // Return null if data is not available\r\n  }\r\n\r\n  // Extract months from the first row of data\r\n  const months = data[0].slice(1);\r\n\r\n  // Print data and months to the console\r\n  console.log('Data:', data);\r\n  console.log('Months:', months);\r\n\r\n  // Remove the first row (months) from data\r\n  const metricsData = data.slice(1);\r\n\r\n  // Find the index of the selected metric\r\n  const metricIndex = metricsData.findIndex(row => row[0] === metric);\r\n\r\n  // Check if metric index is valid\r\n  if (metricIndex === -1) {\r\n    return null; // Return null if metric is not found in data\r\n  }\r\n\r\n  // Extract values for the selected metric\r\n  const metricValues = metricsData[metricIndex].slice(1);\r\n\r\n  // Combine months with corresponding metric values\r\n  const chartData = months.map((month, index) => ({\r\n    month,\r\n    [metric]: metricValues[index]\r\n  }));\r\n\r\n  return (\r\n    <LineChart width={800} height={400} data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"month\" />\r\n      <YAxis />\r\n      <Tooltip />\r\n      <Legend />\r\n      <Line type=\"monotone\" dataKey={metric} stroke=\"#8884d8\" />\r\n    </LineChart>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n\r\n*/\r\nimport React from 'react';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\n\r\nconst CustomTooltip = ({ active, payload, label }) => {\r\n  if (active && payload && payload.length) {\r\n    return (\r\n      <div className=\"custom-tooltip\" style={{ backgroundColor: '#f5f5f5', padding: '10px', border: '1px solid #ccc' }}>\r\n        <p className=\"label\" style={{ color: 'green' }}>{`${label} : ${payload[0].value}`}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst Chart = ({ data, metric }) => {\r\n  if (!data || data.length === 0) {\r\n    return null; // Return null if data is not available\r\n  }\r\n\r\n  const months = ['Jan', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n  const metricsData = data.slice(1);\r\n\r\n  const metricIndex = metricsData.findIndex(row => row[0] === metric);\r\n  if (metricIndex === -1) {\r\n    return null; // Return null if metric is not found in data\r\n  }\r\n\r\n  const metricValues = metricsData[metricIndex].slice(1);\r\n  const chartData = months.map((month, index) => ({\r\n    month,\r\n    value: metricValues[index]\r\n  }));\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <LineChart width={1100} height={400} data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"month\" stroke=\"#000\" />\r\n        <YAxis label={{ value: metric, angle: -90, position: 'insideLeft', style: { fill: '#000' } }} stroke=\"#000\" />\r\n        <Tooltip content={<CustomTooltip />} />\r\n        <Legend />\r\n        <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n      </LineChart>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}