{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meghna\\\\Desktop\\\\Meghna Manoj Nair\\\\New York University\\\\Job Hunt\\\\Internships\\\\Vera 4\\\\frontend\\\\src\\\\App.js\";\n/*import React, { useState, useEffect } from 'react';\r\nimport Chart from './components/Chart';\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n  const [metrics, setMetrics] = useState([]);\r\n  const [selectedMetric, setSelectedMetric] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/data');\r\n      const jsonData = await response.json();\r\n      console.log('Data:', jsonData); // Log the fetched data\r\n      setData(jsonData);\r\n      setMetrics(jsonData.slice(1).map(row => row[0])); // Extracting metric names from the first column\r\n      setSelectedMetric(jsonData[0][1]); // Assuming the first metric is selected initially\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const handleMetricChange = (event) => {\r\n    setSelectedMetric(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\" style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', height: '100vh', color: '#fff' }}>\r\n      <header className=\"App-header\">\r\n        <h1>Vera's Environment Dashboard</h1>\r\n        <p>Welcome to Vera's Environmental Metrics Dashboard. Below, you can find data for various environmental metrics for the year 2023. This dashboard visualizes data for water consumption, natural gas consumption, grid electricity consumption, steam consumption, food waste, solar energy production, and water recycled.</p>\r\n      </header>\r\n      <div className=\"container\">\r\n        <select value={selectedMetric} onChange={handleMetricChange}>\r\n          {metrics.map((metric, index) => (\r\n            <option key={index} value={metric}>{metric}</option>\r\n          ))}\r\n        </select>\r\n        <Chart data={data.slice(1)} metric={selectedMetric} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n*/\nimport PieChart from './components/PieChart'; // Import the new PieChart component\n\n// Add a new state variable for the pie chart data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [pieData, setPieData] = useState([]);\nfunction App() {\n  // Modify fetchData to also fetch data for the pie chart\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/data');\n      const jsonData = await response.json();\n      console.log('Data:', jsonData); // Log the fetched data\n      setData(jsonData);\n      setMetrics(jsonData.slice(1).map(row => row[0])); // Extracting metric names from the first column\n      setSelectedMetric(jsonData[0][1]); // Assuming the first metric is selected initially\n\n      // Assume the pie chart data is in the second column\n      setPieData(jsonData.slice(1).map(row => ({\n        name: row[0],\n        value: row[1]\n      })));\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  // Add the PieChart component to the render method\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: '100vh',\n      color: '#fff'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(PieChart, {\n        data: pieData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 3\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["PieChart","jsxDEV","_jsxDEV","pieData","setPieData","useState","App","fetchData","response","fetch","jsonData","json","console","log","setData","setMetrics","slice","map","row","setSelectedMetric","name","value","error","className","style","display","flexDirection","alignItems","justifyContent","height","color","children","data","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Meghna/Desktop/Meghna Manoj Nair/New York University/Job Hunt/Internships/Vera 4/frontend/src/App.js"],"sourcesContent":["/*import React, { useState, useEffect } from 'react';\r\nimport Chart from './components/Chart';\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n  const [metrics, setMetrics] = useState([]);\r\n  const [selectedMetric, setSelectedMetric] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/data');\r\n      const jsonData = await response.json();\r\n      console.log('Data:', jsonData); // Log the fetched data\r\n      setData(jsonData);\r\n      setMetrics(jsonData.slice(1).map(row => row[0])); // Extracting metric names from the first column\r\n      setSelectedMetric(jsonData[0][1]); // Assuming the first metric is selected initially\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const handleMetricChange = (event) => {\r\n    setSelectedMetric(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\" style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', height: '100vh', color: '#fff' }}>\r\n      <header className=\"App-header\">\r\n        <h1>Vera's Environment Dashboard</h1>\r\n        <p>Welcome to Vera's Environmental Metrics Dashboard. Below, you can find data for various environmental metrics for the year 2023. This dashboard visualizes data for water consumption, natural gas consumption, grid electricity consumption, steam consumption, food waste, solar energy production, and water recycled.</p>\r\n      </header>\r\n      <div className=\"container\">\r\n        <select value={selectedMetric} onChange={handleMetricChange}>\r\n          {metrics.map((metric, index) => (\r\n            <option key={index} value={metric}>{metric}</option>\r\n          ))}\r\n        </select>\r\n        <Chart data={data.slice(1)} metric={selectedMetric} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n*/\r\nimport PieChart from './components/PieChart'; // Import the new PieChart component\r\n\r\n// Add a new state variable for the pie chart data\r\nconst [pieData, setPieData] = useState([]);\r\nfunction App() {\r\n// Modify fetchData to also fetch data for the pie chart\r\nconst fetchData = async () => {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/data');\r\n    const jsonData = await response.json();\r\n    console.log('Data:', jsonData); // Log the fetched data\r\n    setData(jsonData);\r\n    setMetrics(jsonData.slice(1).map(row => row[0])); // Extracting metric names from the first column\r\n    setSelectedMetric(jsonData[0][1]); // Assuming the first metric is selected initially\r\n\r\n    // Assume the pie chart data is in the second column\r\n    setPieData(jsonData.slice(1).map(row => ({ name: row[0], value: row[1] })));\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n  }\r\n};\r\n\r\n// Add the PieChart component to the render method\r\nreturn (\r\n  <div className=\"App\" style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', height: '100vh', color: '#fff' }}>\r\n    {/*...*/}\r\n    <div className=\"container\">\r\n      {/*...*/}\r\n      <PieChart data={pieData} />\r\n    </div>\r\n  </div>\r\n);\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,QAAQ,MAAM,uBAAuB,CAAC,CAAC;;AAE9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;AAC1C,SAASC,GAAGA,CAAA,EAAG;EACf;EACA,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC;MAC9D,MAAMC,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACtCC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEH,QAAQ,CAAC,CAAC,CAAC;MAChCI,OAAO,CAACJ,QAAQ,CAAC;MACjBK,UAAU,CAACL,QAAQ,CAACM,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAClDC,iBAAiB,CAACT,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;MAEnC;MACAN,UAAU,CAACM,QAAQ,CAACM,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAACC,GAAG,KAAK;QAAEE,IAAI,EAAEF,GAAG,CAAC,CAAC,CAAC;QAAEG,KAAK,EAAEH,GAAG,CAAC,CAAC;MAAE,CAAC,CAAC,CAAC,CAAC;IAC7E,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdV,OAAO,CAACU,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;;EAED;EACA,oBACEpB,OAAA;IAAKqB,SAAS,EAAC,KAAK;IAACC,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,aAAa,EAAE,QAAQ;MAAEC,UAAU,EAAE,QAAQ;MAAEC,cAAc,EAAE,QAAQ;MAAEC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO,CAAE;IAAAC,QAAA,eAEvJ7B,OAAA;MAAKqB,SAAS,EAAC,WAAW;MAAAQ,QAAA,eAExB7B,OAAA,CAACF,QAAQ;QAACgC,IAAI,EAAE7B;MAAQ;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAER;AAACC,EAAA,GA5BQ/B,GAAG;AA8BZ,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}