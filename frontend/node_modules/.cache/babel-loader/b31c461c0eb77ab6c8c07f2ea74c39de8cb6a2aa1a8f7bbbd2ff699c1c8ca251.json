{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meghna\\\\Desktop\\\\Meghna Manoj Nair\\\\New York University\\\\Job Hunt\\\\Internships\\\\Vera 4\\\\frontend\\\\src\\\\components\\\\Chart.js\";\n/*import React from 'react';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\n\r\nconst Chart = ({ data, metric }) => {\r\n  // Check if data is undefined or null\r\n  if (!data || data.length === 0) {\r\n    return null; // Return null if data is not available\r\n  }\r\n\r\n  // Extract months from the first row of data\r\n  const months = data[0].slice(1);\r\n\r\n  // Print data and months to the console\r\n  console.log('Data:', data);\r\n  console.log('Months:', months);\r\n\r\n  // Remove the first row (months) from data\r\n  const metricsData = data.slice(1);\r\n\r\n  // Find the index of the selected metric\r\n  const metricIndex = metricsData.findIndex(row => row[0] === metric);\r\n\r\n  // Check if metric index is valid\r\n  if (metricIndex === -1) {\r\n    return null; // Return null if metric is not found in data\r\n  }\r\n\r\n  // Extract values for the selected metric\r\n  const metricValues = metricsData[metricIndex].slice(1);\r\n\r\n  // Combine months with corresponding metric values\r\n  const chartData = months.map((month, index) => ({\r\n    month,\r\n    [metric]: metricValues[index]\r\n  }));\r\n\r\n  return (\r\n    <LineChart width={800} height={400} data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"month\" />\r\n      <YAxis />\r\n      <Tooltip />\r\n      <Legend />\r\n      <Line type=\"monotone\" dataKey={metric} stroke=\"#8884d8\" />\r\n    </LineChart>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n\r\n*/\nimport React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport CustomTooltip from './CustomTooltip';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chart = ({\n  data,\n  metric\n}) => {\n  // Define the list of months\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n  // Remove the first row (months) from data\n  const metricsData = data.slice(1);\n\n  // Find the index of the selected metric\n  const metricIndex = metricsData.findIndex(row => row[0] === metric);\n\n  // Check if metric index is valid\n  if (metricIndex === -1) {\n    return null; // Return null if metric is not found in data\n  }\n\n  // Extract values for the selected metric\n  const metricValues = metricsData[metricIndex].slice(1);\n\n  // Combine months with corresponding metric values\n  const chartData = months.map((month, index) => ({\n    month,\n    [metric]: metricValues[index]\n  }));\n  return /*#__PURE__*/_jsxDEV(LineChart, {\n    width: 1200,\n    height: 400,\n    data: chartData,\n    margin: {\n      top: 20,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      stroke: \"#ccc\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n      dataKey: \"month\",\n      label: {\n        value: 'Months (2023)',\n        position: 'insideBottomRight',\n        offset: 0,\n        style: {\n          fill: 'white'\n        }\n      },\n      stroke: \"#000\",\n      tick: {\n        fill: '#000',\n        fontWeight: 'bold'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n      label: {\n        value: metric,\n        angle: -90,\n        position: 'center',\n        dx: -20,\n        style: {\n          fill: 'white'\n        }\n      },\n      stroke: \"#000\",\n      tick: {\n        fill: '#000',\n        fontWeight: 'bold'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n      content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      type: \"monotone\",\n      dataKey: metric,\n      stroke: \"#fff\",\n      activeDot: {\n        r: 8\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_c = Chart;\nexport default Chart;\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["React","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","CustomTooltip","jsxDEV","_jsxDEV","Chart","data","metric","months","metricsData","slice","metricIndex","findIndex","row","metricValues","chartData","map","month","index","width","height","margin","top","right","left","bottom","children","strokeDasharray","stroke","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","label","value","position","offset","style","fill","tick","fontWeight","angle","dx","content","type","activeDot","r","_c","$RefreshReg$"],"sources":["C:/Users/Meghna/Desktop/Meghna Manoj Nair/New York University/Job Hunt/Internships/Vera 4/frontend/src/components/Chart.js"],"sourcesContent":["/*import React from 'react';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\n\r\nconst Chart = ({ data, metric }) => {\r\n  // Check if data is undefined or null\r\n  if (!data || data.length === 0) {\r\n    return null; // Return null if data is not available\r\n  }\r\n\r\n  // Extract months from the first row of data\r\n  const months = data[0].slice(1);\r\n\r\n  // Print data and months to the console\r\n  console.log('Data:', data);\r\n  console.log('Months:', months);\r\n\r\n  // Remove the first row (months) from data\r\n  const metricsData = data.slice(1);\r\n\r\n  // Find the index of the selected metric\r\n  const metricIndex = metricsData.findIndex(row => row[0] === metric);\r\n\r\n  // Check if metric index is valid\r\n  if (metricIndex === -1) {\r\n    return null; // Return null if metric is not found in data\r\n  }\r\n\r\n  // Extract values for the selected metric\r\n  const metricValues = metricsData[metricIndex].slice(1);\r\n\r\n  // Combine months with corresponding metric values\r\n  const chartData = months.map((month, index) => ({\r\n    month,\r\n    [metric]: metricValues[index]\r\n  }));\r\n\r\n  return (\r\n    <LineChart width={800} height={400} data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"month\" />\r\n      <YAxis />\r\n      <Tooltip />\r\n      <Legend />\r\n      <Line type=\"monotone\" dataKey={metric} stroke=\"#8884d8\" />\r\n    </LineChart>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n\r\n*/\r\nimport React from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\r\nimport CustomTooltip from './CustomTooltip';\r\n\r\nconst Chart = ({ data, metric }) => {\r\n  // Define the list of months\r\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\n  // Remove the first row (months) from data\r\n  const metricsData = data.slice(1);\r\n\r\n  // Find the index of the selected metric\r\n  const metricIndex = metricsData.findIndex(row => row[0] === metric);\r\n\r\n  // Check if metric index is valid\r\n  if (metricIndex === -1) {\r\n    return null; // Return null if metric is not found in data\r\n  }\r\n\r\n  // Extract values for the selected metric\r\n  const metricValues = metricsData[metricIndex].slice(1);\r\n\r\n  // Combine months with corresponding metric values\r\n  const chartData = months.map((month, index) => ({\r\n    month,\r\n    [metric]: metricValues[index]\r\n  }));\r\n\r\n  return (\r\n    <LineChart width={1200} height={400} data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#ccc\" />\r\n      <XAxis dataKey=\"month\" label={{ value: 'Months (2023)', position: 'insideBottomRight', offset: 0, style: { fill: 'white' } }} stroke=\"#000\" tick={{ fill: '#000', fontWeight: 'bold' }} />\r\n      <YAxis label={{ value: metric, angle: -90, position: 'center', dx: -20, style: { fill: 'white' } }} stroke=\"#000\" tick={{ fill: '#000', fontWeight: 'bold' }} />\r\n      <Tooltip content={<CustomTooltip />} />\r\n      <Legend />\r\n      <Line type=\"monotone\" dataKey={metric} stroke=\"#fff\" activeDot={{ r: 8 }} />\r\n    </LineChart>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}