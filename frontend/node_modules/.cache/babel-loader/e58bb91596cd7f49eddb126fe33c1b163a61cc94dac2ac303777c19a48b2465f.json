{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meghna\\\\Desktop\\\\Meghna Manoj Nair\\\\New York University\\\\Job Hunt\\\\Internships\\\\Vera 4\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n/*import React, { useState, useEffect } from 'react';\r\nimport Chart from './components/Chart';\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n  const [selectedMetric, setSelectedMetric] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/data');\r\n      const jsonData = await response.json();\r\n      setData(jsonData);\r\n      setSelectedMetric(jsonData[0][1]); // Assuming the first metric is selected initially\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const handleMetricChange = (event) => {\r\n    setSelectedMetric(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Environmental Metrics Dashboard</h1>\r\n      <select value={selectedMetric} onChange={handleMetricChange}>\r\n        {data[0] && data[0].map((metric, index) => (\r\n          <option key={index} value={metric}>{metric}</option>\r\n        ))}\r\n      </select>\r\n      <Chart data={data.slice(1)} metric={selectedMetric} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n*/\nimport React, { useState, useEffect } from 'react';\nimport Chart from './components/Chart';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedMetric, setSelectedMetric] = useState('');\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/data');\n      const jsonData = await response.json();\n      setData(jsonData);\n      setSelectedMetric(jsonData[0][1]); // Assuming the first metric is selected initially\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  const handleMetricChange = event => {\n    setSelectedMetric(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Vera's Environment Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Welcome to Vera's Environmental Metrics Dashboard. Below, you can find data for various environmental metrics for the year 2023. This dashboard visualizes data for water consumption, natural gas consumption, grid electricity consumption, steam consumption, food waste, solar energy production, and water recycled.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedMetric,\n        onChange: handleMetricChange,\n        children: data[0] && data[0].map((metric, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: metric,\n          children: metric\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chart, {\n        data: data.slice(1),\n        metric: selectedMetric\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"fluPDi4v3DQxmTeug2RV/YTjuak=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Chart","jsxDEV","_jsxDEV","App","_s","data","setData","selectedMetric","setSelectedMetric","fetchData","response","fetch","jsonData","json","error","console","handleMetricChange","event","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","metric","index","slice","_c","$RefreshReg$"],"sources":["C:/Users/Meghna/Desktop/Meghna Manoj Nair/New York University/Job Hunt/Internships/Vera 4/frontend/src/App.js"],"sourcesContent":["/*import React, { useState, useEffect } from 'react';\r\nimport Chart from './components/Chart';\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n  const [selectedMetric, setSelectedMetric] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/data');\r\n      const jsonData = await response.json();\r\n      setData(jsonData);\r\n      setSelectedMetric(jsonData[0][1]); // Assuming the first metric is selected initially\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const handleMetricChange = (event) => {\r\n    setSelectedMetric(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Environmental Metrics Dashboard</h1>\r\n      <select value={selectedMetric} onChange={handleMetricChange}>\r\n        {data[0] && data[0].map((metric, index) => (\r\n          <option key={index} value={metric}>{metric}</option>\r\n        ))}\r\n      </select>\r\n      <Chart data={data.slice(1)} metric={selectedMetric} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n*/\r\nimport React, { useState, useEffect } from 'react';\r\nimport Chart from './components/Chart';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n  const [selectedMetric, setSelectedMetric] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/data');\r\n      const jsonData = await response.json();\r\n      setData(jsonData);\r\n      setSelectedMetric(jsonData[0][1]); // Assuming the first metric is selected initially\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const handleMetricChange = (event) => {\r\n    setSelectedMetric(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Vera's Environment Dashboard</h1>\r\n        <p>Welcome to Vera's Environmental Metrics Dashboard. Below, you can find data for various environmental metrics for the year 2023. This dashboard visualizes data for water consumption, natural gas consumption, grid electricity consumption, steam consumption, food waste, solar energy production, and water recycled.</p>\r\n      </header>\r\n      <div className=\"container\">\r\n        <select value={selectedMetric} onChange={handleMetricChange}>\r\n          {data[0] && data[0].map((metric, index) => (\r\n            <option key={index} value={metric}>{metric}</option>\r\n          ))}\r\n        </select>\r\n        <Chart data={data.slice(1)} metric={selectedMetric} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}