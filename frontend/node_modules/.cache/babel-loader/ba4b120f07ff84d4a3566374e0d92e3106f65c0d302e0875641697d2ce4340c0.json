{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meghna\\\\Desktop\\\\Meghna Manoj Nair\\\\New York University\\\\Job Hunt\\\\Internships\\\\Vera 4\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// Import necessary components and hooks from React and local files\nimport React, { useState, useEffect } from 'react';\nimport Chart from './components/Chart';\n\n// Define the main App component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Initialize state variables for the data, metrics, and selected metric\n  const [data, setData] = useState([]);\n  const [metrics, setMetrics] = useState([]);\n  const [selectedMetric, setSelectedMetric] = useState('');\n\n  // Use the useEffect hook to fetch data when the component mounts\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  // Define an async function to fetch data from the API\n  const fetchData = async () => {\n    try {\n      // Fetch data from the API\n      const response = await fetch('http://localhost:5000/api/data');\n      // Parse the JSON data from the response\n      const jsonData = await response.json();\n      // Log the fetched data\n      console.log('Data:', jsonData);\n      // Update the data state variable with the fetched data\n      setData(jsonData);\n      // Extract the metric names from the first column of the data and update the metrics state variable\n      setMetrics(jsonData.slice(1).map(row => row[0]));\n      // Assume the first metric is selected initially and update the selectedMetric state variable\n      setSelectedMetric(jsonData[0][1]);\n    } catch (error) {\n      // Log any errors that occur when fetching data\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  // Define a function to handle changes to the selected metric\n  const handleMetricChange = event => {\n    // Update the selectedMetric state variable with the new value\n    setSelectedMetric(event.target.value);\n  };\n\n  // Render the App component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header hideable\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Green Dash\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"padded-paragraph\",\n        children: \"Welcome to our environmental data visualization tool...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-container\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"dropdown\",\n          value: selectedMetric,\n          onChange: handleMetricChange,\n          children: metrics.map((metric, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: metric,\n            children: metric\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(Chart, {\n          data: data.slice(1),\n          metric: selectedMetric\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n// Export the App component\n_s(App, \"gcWWXMaEUGNR15p1N/Y3Ql/GXxs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Chart","jsxDEV","_jsxDEV","App","_s","data","setData","metrics","setMetrics","selectedMetric","setSelectedMetric","fetchData","response","fetch","jsonData","json","console","log","slice","map","row","error","handleMetricChange","event","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","metric","index","_c","$RefreshReg$"],"sources":["C:/Users/Meghna/Desktop/Meghna Manoj Nair/New York University/Job Hunt/Internships/Vera 4/frontend/src/App.js"],"sourcesContent":["// Import necessary components and hooks from React and local files\r\nimport React, { useState, useEffect } from 'react';\r\nimport Chart from './components/Chart';\r\n\r\n// Define the main App component\r\nfunction App() {\r\n  // Initialize state variables for the data, metrics, and selected metric\r\n  const [data, setData] = useState([]);\r\n  const [metrics, setMetrics] = useState([]);\r\n  const [selectedMetric, setSelectedMetric] = useState('');\r\n\r\n  // Use the useEffect hook to fetch data when the component mounts\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Define an async function to fetch data from the API\r\n  const fetchData = async () => {\r\n    try {\r\n      // Fetch data from the API\r\n      const response = await fetch('http://localhost:5000/api/data');\r\n      // Parse the JSON data from the response\r\n      const jsonData = await response.json();\r\n      // Log the fetched data\r\n      console.log('Data:', jsonData);\r\n      // Update the data state variable with the fetched data\r\n      setData(jsonData);\r\n      // Extract the metric names from the first column of the data and update the metrics state variable\r\n      setMetrics(jsonData.slice(1).map(row => row[0]));\r\n      // Assume the first metric is selected initially and update the selectedMetric state variable\r\n      setSelectedMetric(jsonData[0][1]);\r\n    } catch (error) {\r\n      // Log any errors that occur when fetching data\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  // Define a function to handle changes to the selected metric\r\n  const handleMetricChange = (event) => {\r\n    // Update the selectedMetric state variable with the new value\r\n    setSelectedMetric(event.target.value);\r\n  };\r\n\r\n  // Render the App component\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header hideable\">\r\n        <h1>Green Dash</h1>\r\n        <p className=\"padded-paragraph\">Welcome to our environmental data visualization tool...</p>\r\n        <div className=\"dropdown-container\">\r\n          {/* Render a dropdown menu for selecting a metric */}\r\n          <select className=\"dropdown\" value={selectedMetric} onChange={handleMetricChange}>\r\n            {/* Render an option for each metric */}\r\n            {metrics.map((metric, index) => (\r\n              <option key={index} value={metric}>{metric}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </header>\r\n      <div className=\"container content\">\r\n        <div className=\"chart-container\">\r\n          {/* Render the Chart component with the selected metric and data */}\r\n          <Chart data={data.slice(1)} metric={selectedMetric} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Export the App component\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}