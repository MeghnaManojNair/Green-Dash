{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meghna\\\\Desktop\\\\Meghna Manoj Nair\\\\New York University\\\\Job Hunt\\\\Internships\\\\Vera 4\\\\frontend\\\\src\\\\components\\\\Chart.js\",\n  _s = $RefreshSig$();\n/*import React from 'react';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\n\r\nconst Chart = ({ data, metric }) => {\r\n  // Check if data is undefined or null\r\n  if (!data || data.length === 0) {\r\n    return null; // Return null if data is not available\r\n  }\r\n\r\n  // Extract months from the first row of data\r\n  const months = data[0].slice(1);\r\n\r\n  // Print data and months to the console\r\n  console.log('Data:', data);\r\n  console.log('Months:', months);\r\n\r\n  // Remove the first row (months) from data\r\n  const metricsData = data.slice(1);\r\n\r\n  // Find the index of the selected metric\r\n  const metricIndex = metricsData.findIndex(row => row[0] === metric);\r\n\r\n  // Check if metric index is valid\r\n  if (metricIndex === -1) {\r\n    return null; // Return null if metric is not found in data\r\n  }\r\n\r\n  // Extract values for the selected metric\r\n  const metricValues = metricsData[metricIndex].slice(1);\r\n\r\n  // Combine months with corresponding metric values\r\n  const chartData = months.map((month, index) => ({\r\n    month,\r\n    [metric]: metricValues[index]\r\n  }));\r\n\r\n  return (\r\n    <LineChart width={800} height={400} data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"month\" />\r\n      <YAxis />\r\n      <Tooltip />\r\n      <Legend />\r\n      <Line type=\"monotone\" dataKey={metric} stroke=\"#8884d8\" />\r\n    </LineChart>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n\r\n*/\nimport React, { useState, useEffect } from 'react';\nimport Chart from './components/Chart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n  const [months, setMonths] = useState([]);\n  const [metrics, setMetrics] = useState([]);\n  const [selectedMetric, setSelectedMetric] = useState('');\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/data');\n      const jsonData = await response.json();\n      console.log('Data:', jsonData); // Log the fetched data\n      setData(jsonData.data);\n      setMonths(jsonData.months); // Set the months\n      setMetrics(jsonData.data.slice(1).map(row => row[0])); // Extracting metric names from the first column\n      setSelectedMetric(jsonData.data[0][1]); // Assuming the first metric is selected initially\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  const handleMetricChange = event => {\n    setSelectedMetric(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Vera's Environment Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Welcome to Vera's Environmental Metrics Dashboard. Below, you can find data for various environmental metrics for the year 2023. This dashboard visualizes data for water consumption, natural gas consumption, grid electricity consumption, steam consumption, food waste, solar energy production, and water recycled.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedMetric,\n        onChange: handleMetricChange,\n        children: metrics.map((metric, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: metric,\n          children: metric\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chart, {\n        data: data,\n        months: months,\n        metric: selectedMetric\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"gRJfdGvVPoqspsFv2RxkX4suNJ8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Chart","jsxDEV","_jsxDEV","App","_s","data","setData","months","setMonths","metrics","setMetrics","selectedMetric","setSelectedMetric","fetchData","response","fetch","jsonData","json","console","log","slice","map","row","error","handleMetricChange","event","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","metric","index","_c","$RefreshReg$"],"sources":["C:/Users/Meghna/Desktop/Meghna Manoj Nair/New York University/Job Hunt/Internships/Vera 4/frontend/src/components/Chart.js"],"sourcesContent":["/*import React from 'react';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\n\r\nconst Chart = ({ data, metric }) => {\r\n  // Check if data is undefined or null\r\n  if (!data || data.length === 0) {\r\n    return null; // Return null if data is not available\r\n  }\r\n\r\n  // Extract months from the first row of data\r\n  const months = data[0].slice(1);\r\n\r\n  // Print data and months to the console\r\n  console.log('Data:', data);\r\n  console.log('Months:', months);\r\n\r\n  // Remove the first row (months) from data\r\n  const metricsData = data.slice(1);\r\n\r\n  // Find the index of the selected metric\r\n  const metricIndex = metricsData.findIndex(row => row[0] === metric);\r\n\r\n  // Check if metric index is valid\r\n  if (metricIndex === -1) {\r\n    return null; // Return null if metric is not found in data\r\n  }\r\n\r\n  // Extract values for the selected metric\r\n  const metricValues = metricsData[metricIndex].slice(1);\r\n\r\n  // Combine months with corresponding metric values\r\n  const chartData = months.map((month, index) => ({\r\n    month,\r\n    [metric]: metricValues[index]\r\n  }));\r\n\r\n  return (\r\n    <LineChart width={800} height={400} data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"month\" />\r\n      <YAxis />\r\n      <Tooltip />\r\n      <Legend />\r\n      <Line type=\"monotone\" dataKey={metric} stroke=\"#8884d8\" />\r\n    </LineChart>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n\r\n*/\r\nimport React, { useState, useEffect } from 'react';\r\nimport Chart from './components/Chart';\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n  const [months, setMonths] = useState([]);\r\n  const [metrics, setMetrics] = useState([]);\r\n  const [selectedMetric, setSelectedMetric] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/data');\r\n      const jsonData = await response.json();\r\n      console.log('Data:', jsonData); // Log the fetched data\r\n      setData(jsonData.data);\r\n      setMonths(jsonData.months); // Set the months\r\n      setMetrics(jsonData.data.slice(1).map(row => row[0])); // Extracting metric names from the first column\r\n      setSelectedMetric(jsonData.data[0][1]); // Assuming the first metric is selected initially\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const handleMetricChange = (event) => {\r\n    setSelectedMetric(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Vera's Environment Dashboard</h1>\r\n        <p>Welcome to Vera's Environmental Metrics Dashboard. Below, you can find data for various environmental metrics for the year 2023. This dashboard visualizes data for water consumption, natural gas consumption, grid electricity consumption, steam consumption, food waste, solar energy production, and water recycled.</p>\r\n      </header>\r\n      <div className=\"container\">\r\n        <select value={selectedMetric} onChange={handleMetricChange}>\r\n          {metrics.map((metric, index) => (\r\n            <option key={index} value={metric}>{metric}</option>\r\n          ))}\r\n        </select>\r\n        <Chart data={data} months={months} metric={selectedMetric} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}