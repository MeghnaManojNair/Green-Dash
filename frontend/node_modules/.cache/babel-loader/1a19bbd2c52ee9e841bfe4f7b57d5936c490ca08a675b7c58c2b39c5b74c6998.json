{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meghna\\\\Desktop\\\\Meghna Manoj Nair\\\\New York University\\\\Job Hunt\\\\Internships\\\\Vera 4\\\\frontend\\\\src\\\\components\\\\Chart.js\";\n/*import React from 'react';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\n\r\nconst Chart = ({ data, metric }) => {\r\n  // Check if data is undefined or null\r\n  if (!data || data.length === 0) {\r\n    return null; // Return null if data is not available\r\n  }\r\n\r\n  // Extract months from the first row of data\r\n  const months = data[0].slice(1);\r\n\r\n  // Print data and months to the console\r\n  console.log('Data:', data);\r\n  console.log('Months:', months);\r\n\r\n  // Remove the first row (months) from data\r\n  const metricsData = data.slice(1);\r\n\r\n  // Find the index of the selected metric\r\n  const metricIndex = metricsData.findIndex(row => row[0] === metric);\r\n\r\n  // Check if metric index is valid\r\n  if (metricIndex === -1) {\r\n    return null; // Return null if metric is not found in data\r\n  }\r\n\r\n  // Extract values for the selected metric\r\n  const metricValues = metricsData[metricIndex].slice(1);\r\n\r\n  // Combine months with corresponding metric values\r\n  const chartData = months.map((month, index) => ({\r\n    month,\r\n    [metric]: metricValues[index]\r\n  }));\r\n\r\n  return (\r\n    <LineChart width={800} height={400} data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"month\" />\r\n      <YAxis />\r\n      <Tooltip />\r\n      <Legend />\r\n      <Line type=\"monotone\" dataKey={metric} stroke=\"#8884d8\" />\r\n    </LineChart>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n\r\n*/\nimport React from 'react';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomTooltip = ({\n  active,\n  payload,\n  label\n}) => {\n  if (active && payload && payload.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-tooltip\",\n      style: {\n        backgroundColor: '#f5f5f5',\n        padding: '10px',\n        border: '1px solid #ccc'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"label\",\n        style: {\n          color: 'green'\n        },\n        children: `${label} : ${payload[0].value}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  }\n  return null;\n};\n_c = CustomTooltip;\nconst Chart = ({\n  data,\n  metric\n}) => {\n  // Check if data is undefined or null\n  if (!data || data.length === 0) {\n    return null; // Return null if data is not available\n  }\n\n  // Manually create a list of months\n  // Manually create a list of months\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  // Remove the first row (months) from data\n  const metricsData = data.slice(1);\n\n  // Find the index of the selected metric\n  const metricIndex = metricsData.findIndex(row => row[0] === metric);\n\n  // Check if metric index is valid\n  if (metricIndex === -1) {\n    return null; // Return null if metric is not found in data\n  }\n\n  // Extract values for the selected metric\n  const metricValues = metricsData[metricIndex].slice(1);\n\n  // Combine months with corresponding metric values\n  const chartData = months.map((month, index) => ({\n    month,\n    [metric]: metricValues[index]\n  }));\n  return /*#__PURE__*/_jsxDEV(LineChart, {\n    width: 1100,\n    height: 400,\n    data: chartData,\n    margin: {\n      top: 20,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      stroke: \"#ccc\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n      dataKey: \"month\",\n      label: {\n        value: 'Months (2023)',\n        position: 'bottom',\n        offset: 0,\n        style: {\n          fill: 'white'\n        }\n      },\n      stroke: \"#000\",\n      tick: {\n        fill: '#000',\n        fontWeight: 'bold'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n      label: {\n        value: metric,\n        angle: -90,\n        position: 'insideLeft',\n        dy: 70,\n        style: {\n          fill: 'white'\n        }\n      },\n      stroke: \"#000\",\n      tick: {\n        fill: '#000',\n        fontWeight: 'bold'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n      content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      type: \"monotone\",\n      dataKey: metric,\n      stroke: \"#fff\",\n      activeDot: {\n        r: 8\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Chart;\nexport default Chart;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomTooltip\");\n$RefreshReg$(_c2, \"Chart\");","map":{"version":3,"names":["React","LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","Legend","jsxDEV","_jsxDEV","CustomTooltip","active","payload","label","length","className","style","backgroundColor","padding","border","children","color","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","Chart","data","metric","months","metricsData","slice","metricIndex","findIndex","row","metricValues","chartData","map","month","index","width","height","margin","top","right","left","bottom","strokeDasharray","stroke","dataKey","position","offset","fill","tick","fontWeight","angle","dy","content","type","activeDot","r","_c2","$RefreshReg$"],"sources":["C:/Users/Meghna/Desktop/Meghna Manoj Nair/New York University/Job Hunt/Internships/Vera 4/frontend/src/components/Chart.js"],"sourcesContent":["/*import React from 'react';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\n\r\nconst Chart = ({ data, metric }) => {\r\n  // Check if data is undefined or null\r\n  if (!data || data.length === 0) {\r\n    return null; // Return null if data is not available\r\n  }\r\n\r\n  // Extract months from the first row of data\r\n  const months = data[0].slice(1);\r\n\r\n  // Print data and months to the console\r\n  console.log('Data:', data);\r\n  console.log('Months:', months);\r\n\r\n  // Remove the first row (months) from data\r\n  const metricsData = data.slice(1);\r\n\r\n  // Find the index of the selected metric\r\n  const metricIndex = metricsData.findIndex(row => row[0] === metric);\r\n\r\n  // Check if metric index is valid\r\n  if (metricIndex === -1) {\r\n    return null; // Return null if metric is not found in data\r\n  }\r\n\r\n  // Extract values for the selected metric\r\n  const metricValues = metricsData[metricIndex].slice(1);\r\n\r\n  // Combine months with corresponding metric values\r\n  const chartData = months.map((month, index) => ({\r\n    month,\r\n    [metric]: metricValues[index]\r\n  }));\r\n\r\n  return (\r\n    <LineChart width={800} height={400} data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"month\" />\r\n      <YAxis />\r\n      <Tooltip />\r\n      <Legend />\r\n      <Line type=\"monotone\" dataKey={metric} stroke=\"#8884d8\" />\r\n    </LineChart>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n\r\n*/\r\nimport React from 'react';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\n\r\nconst CustomTooltip = ({ active, payload, label }) => {\r\n  if (active && payload && payload.length) {\r\n    return (\r\n      <div className=\"custom-tooltip\" style={{ backgroundColor: '#f5f5f5', padding: '10px', border: '1px solid #ccc' }}>\r\n        <p className=\"label\" style={{ color: 'green' }}>{`${label} : ${payload[0].value}`}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst Chart = ({ data, metric }) => {\r\n  // Check if data is undefined or null\r\n  if (!data || data.length === 0) {\r\n    return null; // Return null if data is not available\r\n  }\r\n\r\n  // Manually create a list of months\r\n  // Manually create a list of months\r\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n  // Remove the first row (months) from data\r\n  const metricsData = data.slice(1);\r\n\r\n  // Find the index of the selected metric\r\n  const metricIndex = metricsData.findIndex(row => row[0] === metric);\r\n\r\n  // Check if metric index is valid\r\n  if (metricIndex === -1) {\r\n    return null; // Return null if metric is not found in data\r\n  }\r\n\r\n  // Extract values for the selected metric\r\n  const metricValues = metricsData[metricIndex].slice(1);\r\n\r\n  // Combine months with corresponding metric values\r\n  const chartData = months.map((month, index) => ({\r\n    month,\r\n    [metric]: metricValues[index]\r\n  }));\r\n\r\n  return (\r\n    <LineChart width={1100} height={400} data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#ccc\" />\r\n      <XAxis dataKey=\"month\" label={{ value: 'Months (2023)', position: 'bottom', offset: 0, style: { fill: 'white' } }} stroke=\"#000\" tick={{ fill: '#000', fontWeight: 'bold' }} />\r\n      <YAxis label={{ value: metric, angle: -90, position: 'insideLeft', dy: 70, style: { fill: 'white' } }} stroke=\"#000\" tick={{ fill: '#000', fontWeight: 'bold' }} />\r\n      <Tooltip content={<CustomTooltip />} />\r\n      <Legend />\r\n      <Line type=\"monotone\" dataKey={metric} stroke=\"#fff\" activeDot={{ r: 8 }} />\r\n    </LineChart>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}