{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Meghna\\\\Desktop\\\\Meghna Manoj Nair\\\\New York University\\\\Job Hunt\\\\Internships\\\\Vera 4\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n/*import React, { useState, useEffect } from 'react';\r\nimport Chart from './components/Chart';\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n  const [selectedMetric, setSelectedMetric] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/data');\r\n      const jsonData = await response.json();\r\n      setData(jsonData);\r\n      setSelectedMetric(jsonData[0][1]); // Assuming the first metric is selected initially\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const handleMetricChange = (event) => {\r\n    setSelectedMetric(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Environmental Metrics Dashboard</h1>\r\n      <select value={selectedMetric} onChange={handleMetricChange}>\r\n        {data[0] && data[0].map((metric, index) => (\r\n          <option key={index} value={metric}>{metric}</option>\r\n        ))}\r\n      </select>\r\n      <Chart data={data.slice(1)} metric={selectedMetric} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n*/\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [metricsData, setMetricsData] = useState(null);\n  const [selectedMetric, setSelectedMetric] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    axios.get('http://localhost:3000/api/data').then(response => {\n      setMetricsData(response.data);\n      // Set the selected metric initially to the first metric in the datasets\n      if (response.data.datasets.length > 0) {\n        setSelectedMetric(response.data.datasets[0].label);\n      }\n    }).catch(error => {\n      setError(error.message);\n    });\n  }, []);\n  const handleMetricChange = event => {\n    setSelectedMetric(event.target.value);\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 12\n    }, this);\n  }\n  if (!metricsData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Vara's Environmental Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"metricSelect\",\n        children: \"Select Metric:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"metricSelect\",\n        value: selectedMetric,\n        onChange: handleMetricChange,\n        children: metricsData.datasets.map((dataset, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: dataset.label,\n          children: dataset.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexWrap: 'wrap'\n      },\n      children: selectedMetric && metricsData.datasets.map((dataset, index) => dataset.label === selectedMetric && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '50%',\n          padding: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: dataset.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          data: {\n            labels: metricsData.labels,\n            datasets: [{\n              label: dataset.label,\n              data: dataset.data,\n              fill: false,\n              borderColor: getRandomColor()\n            }]\n          },\n          options: {\n            scales: {\n              xAxes: [{\n                scaleLabel: {\n                  display: true,\n                  labelString: 'Month'\n                }\n              }],\n              yAxes: [{\n                scaleLabel: {\n                  display: true,\n                  labelString: dataset.label\n                },\n                ticks: {\n                  beginAtZero: true,\n                  suggestedMax: Math.max(...dataset.data) + 1\n                }\n              }]\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bb37R+WzGMNvkrn+1gJnDg8egaY=\");\n_c = App;\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","Line","jsxDEV","_jsxDEV","App","_s","metricsData","setMetricsData","selectedMetric","setSelectedMetric","error","setError","get","then","response","data","datasets","length","label","catch","message","handleMetricChange","event","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","map","dataset","index","style","display","flexWrap","width","padding","labels","fill","borderColor","getRandomColor","options","scales","xAxes","scaleLabel","labelString","yAxes","ticks","beginAtZero","suggestedMax","Math","max","_c","letters","color","i","floor","random","$RefreshReg$"],"sources":["C:/Users/Meghna/Desktop/Meghna Manoj Nair/New York University/Job Hunt/Internships/Vera 4/frontend/src/App.js"],"sourcesContent":["/*import React, { useState, useEffect } from 'react';\r\nimport Chart from './components/Chart';\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n  const [selectedMetric, setSelectedMetric] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/data');\r\n      const jsonData = await response.json();\r\n      setData(jsonData);\r\n      setSelectedMetric(jsonData[0][1]); // Assuming the first metric is selected initially\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const handleMetricChange = (event) => {\r\n    setSelectedMetric(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Environmental Metrics Dashboard</h1>\r\n      <select value={selectedMetric} onChange={handleMetricChange}>\r\n        {data[0] && data[0].map((metric, index) => (\r\n          <option key={index} value={metric}>{metric}</option>\r\n        ))}\r\n      </select>\r\n      <Chart data={data.slice(1)} metric={selectedMetric} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n*/\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nfunction App() {\r\n  const [metricsData, setMetricsData] = useState(null);\r\n  const [selectedMetric, setSelectedMetric] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    axios.get('http://localhost:3000/api/data')\r\n      .then((response) => {\r\n        setMetricsData(response.data);\r\n        // Set the selected metric initially to the first metric in the datasets\r\n        if (response.data.datasets.length > 0) {\r\n          setSelectedMetric(response.data.datasets[0].label);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setError(error.message);\r\n      });\r\n  }, []);\r\n\r\n  const handleMetricChange = (event) => {\r\n    setSelectedMetric(event.target.value);\r\n  };\r\n\r\n  if (error) {\r\n    return <div>Error: {error}</div>;\r\n  }\r\n\r\n  if (!metricsData) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Vara's Environmental Analysis</h1>\r\n      <div>\r\n        <label htmlFor=\"metricSelect\">Select Metric:</label>\r\n        <select id=\"metricSelect\" value={selectedMetric} onChange={handleMetricChange}>\r\n          {metricsData.datasets.map((dataset, index) => (\r\n            <option key={index} value={dataset.label}>{dataset.label}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n        {selectedMetric && metricsData.datasets.map((dataset, index) => (\r\n          dataset.label === selectedMetric && (\r\n            <div key={index} style={{ width: '50%', padding: '10px' }}>\r\n              <h2>{dataset.label}</h2>\r\n              <Line\r\n                data={{\r\n                  labels: metricsData.labels,\r\n                  datasets: [{\r\n                    label: dataset.label,\r\n                    data: dataset.data,\r\n                    fill: false,\r\n                    borderColor: getRandomColor(),\r\n                  }],\r\n                }}\r\n                options={{\r\n                  scales: {\r\n                    xAxes: [{\r\n                      scaleLabel: {\r\n                        display: true,\r\n                        labelString: 'Month',\r\n                      },\r\n                    }],\r\n                    yAxes: [{\r\n                      scaleLabel: {\r\n                        display: true,\r\n                        labelString: dataset.label,\r\n                      },\r\n                      ticks: {\r\n                        beginAtZero: true,\r\n                        suggestedMax: Math.max(...dataset.data) + 1,\r\n                      },\r\n                    }],\r\n                  },\r\n                }}\r\n              />\r\n            </div>\r\n          )\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getRandomColor() {\r\n  const letters = '0123456789ABCDEF';\r\n  let color = '#';\r\n  for (let i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}